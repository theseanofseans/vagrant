#!/usr/bin/bash
# file: new-script__date_work.conf script__date_work.conf inherited from script_skeleton.sh  VERSION=1.04.03 

THIS_SCRIPT__VERSION=3.01.11 
THIS_LIB_NAME="script__date_work.conf"

TEST_VAL="" #TEST_VAL 
# META META[NAME] {META[NAME]} 
declare -A META 
#ALL_DATE_VAR ALL_DATE_VAR[N] 
declare -a ALL_DATE_VAR
# DATE_VAR_I DATE_VAR_I[NAME] {DATE_VAR_I[NAME]} 
## name to index map 
declare -A DATE_VAR_I 

export THIS_WEEK_OF_DAYIDS=( 0 ) #THIS_WEEK_OF_DAYIDS 

#                  0   1   2   3   4   5   6 
export DOW_NAMES=( Sun Mon Tue Wed Thu Fri Sat ) #DOW_NAMES 
export DAY_NAMES=( Sunday Monday Tuesday Wednesday Thursday Friday Saturday ) #DAY_NAMES 

#DAY_DAYID DAY_DAYID[DAY] {DAY_DAYID[DAY]} 
declare -A DAY_DAYID 
#DOW_DAYID DOW_DAYID[DOW] {DOW_DAYID[DOW]} 
declare -A DOW_DAYID 

source ~/lib/script__usage_message.conf 
#USAGE_MESSAGE 
export USAGE_MESSAGE="$0 VERSION=${THIS_SCRIPT__VERSION}\nUSAGE: \n"
USAGE_MESSAGE="${USAGE_MESSAGE}# --- \n" 
USAGE_MESSAGE="${USAGE_MESSAGE} [LIB_TEST=0|1 (d:0) ] \n" 
USAGE_MESSAGE="${USAGE_MESSAGE} [LIB_HELP=0|1 (d:1) ] \n" 
# 
USAGE_MESSAGE="${USAGE_MESSAGE}source $0 \n\n" 
#USAGE_MESSAGE="${USAGE_MESSAGE} x \n" 

# ---- FUNCTIONS ---- { 
#-- delete all previous instances of the functions entries in the namespace:
unset -f dw__acc
unset -f test_out
unset -f list_all_datevars
unset -f dw__set_day_date_vars
unset -f dw__set_today
unset -f dw__set_week_date_vars
unset -f dw__set_month_date_vars
unset -f dw__set_year_date_vars
#-

#-- utlity functions -- {

USAGE_MESSAGE="${USAGE_MESSAGE} \n" 
# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} dw__acc \"META_NAME\" \"\$NEWVAL\" \n"  
USAGE_MESSAGE="${USAGE_MESSAGE} VAL= dw__acc \"META_NAME\" \n\n"  
function dw__acc() {
	F_ARG1=$1 #F_ARG1 
	NEWVAL=$2 #NEWVAL 

# META META[NAME] {META[NAME]} 
	if [[ (-n "$F_ARG1") && (-n "$NEWVAL") ]] ; then 
		META["$F_ARG1"]="$NEWVAL" 
		return "${META[$F_ARG1]}"
	elif [[ (-n "$F_ARG1") && (-n "${META[$F_ARG1]}") ]] ; then  
		return "${META[$F_ARG1]}"
	elif [[ (! -n "$F_ARG1") ]] ; then 
		echo "ERROR dw__acc: F_ARG1 not defined"
		return 1 
	elif [[ (-n "$F_ARG1") && (! -n "${META[$F_ARG1]}") ]] ; then  
		return 0
	fi

	return "${META[$F_ARG1]}"
} 


# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} test_out \"TEST_MESSAGE\"  \n\n"  
function test_out() {
	F_ARG1=$1 #F_ARG1 
	[[ ! -n "$F_ARG1" ]] && echo "ERROR test_out: F_ARG1($F_ARG1) not valid " && return 1 
	if [[ "${META[LIB_TEST]}" == 1 ]] ; then
		printf "$F_ARG1\n" 
	fi
	return 0
}


# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} list_all_datevars \n\n"  
function list_all_datevars() {

	[[ `dw__acc "LIB_TEST"` ]] && echo " LIB_TEST(${META[LIB_TEST]})" 
	[[ "${META[LIB_TEST]}" == 1 ]] && echo " LIB_TEST(${META[LIB_TEST]})" 
	printf "#ALL_DATE_VAR: ${#ALL_DATE_VAR[*]} \n"
	echo "ALL_DATE_VAR[0]=${ALL_DATE_VAR[0]} " 

	printf "\nMETA by key/value pairs:\n"
	for key in ${ALL_DATE_VAR[@]} ; do
		echo "key($key) META[$key]='${META[$key]}' "
	done 
	echo

	printf "vars from 0 to #ALL_DATE_VAR(${#ALL_DATE_VAR[*]}) \n"
	for(( i=0 ; i< ${#ALL_DATE_VAR[*]} ; i++ )) ; do
		printf "i($i) ALL_DATE_VAR[$i] = ${ALL_DATE_VAR[$i]}  "
		printf "DATE_VAR_I[${ALL_DATE_VAR[$i]}]='${DATE_VAR_I[${ALL_DATE_VAR[$i]}]}' \n"
	done
	echo

	printf "\n#THIS_WEEK_OF_DAYIDS: ${#THIS_WEEK_OF_DAYIDS[*]} \n"
	printf "THIS_WEEK_OF_DAYIDS= ${THIS_WEEK_OF_DAYIDS[*]} \n\n"

	printf "\n\n#DATE_VAR_I: ${#DATE_VAR_I[*]} \n"
	for key in "${#DATE_VAR_I[@]}" ; do
		echo "key($key) DATE_VAR_I[$key]='${DATE_VAR_I[$key]}' "
	done
}

# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} show_today \n"  
USAGE_MESSAGE="${USAGE_MESSAGE} 	prints \$TODAY \n\n"  
function show_today() {

	date

	# show {META[TODAY]} var 
	echo "{META[TODAY]}='${META[TODAY]}' "

	# show TODAY var 
	echo "TODAY ='$TODAY' "

	echo
}



# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} test_out \"TEST_MESSAGE\"  \n\n"  

#-- u} 


#-- dateWork functions -- { # dWf  

# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} dw__set_day_date_vars \"[DAYID=YYYYMMDD | d:today]\"  \n"  
USAGE_MESSAGE="${USAGE_MESSAGE}    DAYID=YYYYMMDD YYYY=\d\d\d\d MM=\d\d DD=\d\d DOW=Dow_day \n" 
USAGE_MESSAGE="${USAGE_MESSAGE}    ALL_DATE_VAR[X]=DAYID  DATE_VAR_I[DAYID]=X \n" 
USAGE_MESSAGE="${USAGE_MESSAGE}    WEEKNUM=yyyyWNnn DOW=Short_name DAY=Full_name \n\n" 
function dw__set_day_date_vars() {
	F_ARG1=$1 #F_ARG1 
	ALL_DATE_VAR=()
	TEST_OUT="" #TEST_OUT 
# set_day_date_vars Index 
	sddvI=${#ALL_DATE_VAR[*]} #sddvI 

	# setup dayid
#DAYID META[DAYID] {META[DAYID]} 
	DAYID=0
	DATETEST=''
	if [[ (-n "$F_ARG1") && ("$F_ARG1") ]] ; then # default to today
echo "setting DAYID with F_ARG1($F_ARG1) "
		META[DAYID]="$F_ARG1"
	else
		META[DAYID]=` /usr/bin/date +'%Y%m%d' `
echo "results of setting DAYID with date command {META[DAYID]}='${META[DAYID]}'  "
	fi

# date test

	# test DAYID , then populate with ALL_DATE_VAR and DATE_VAR_I 
##P#	datetest --input-format="%Y%m%d"  --isvalid "${META[DAYID]}" 
##Rep#	datetest --input-format="%Y%m%d"  --isvalid "${META[DAYID]}" 
##Rep#	if [[ "$?" != "0" ]] ; then
##Rep#		echo "ERROR $FUNCNAME: ?($?) problem with datetest for META[DAYID](${META[DAYID]})"
##Rep#		return 1
##Rep#	else
##Rep#		test_out "$FUNCNAME: datetest for META[DAYID](${META[DAYID]}) valid " 
##Rep#	fi
	DAYID=${META[DAYID]} #DAYID
	ALL_DATE_VAR[$sddvI]="DAYID"; DATE_VAR_I["DAYID"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 
	test_out "$FUNCNAME: after setup dayid: DAYID=${META[DAYID]} "

	# --- build general date vars 
#YYYY META[YYYY] {META[YYYY]} 
	META[YYYY]=${DAYID:0:4}
#MM META[MM] {META[MM]} 
	META[MM]=${DAYID:4:2}
#DD META[DD] {META[DD]} 
	META[DD]=${DAYID:6:2}
	ALL_DATE_VAR[$sddvI]="YYYY"; DATE_VAR_I["YYYY"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 
	ALL_DATE_VAR[$sddvI]="MM"; DATE_VAR_I["MM"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 
	ALL_DATE_VAR[$sddvI]="DD"; DATE_VAR_I["DD"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 

#WEEKNUM META[WEEKNUM] {META[WEEKNUM]} 
	META[WEEKNUM]=` /usr/bin/date -d "${META[YYYY]}-${META[MM]}-${META[DD]} 00:00" +"${META[YYYY]}WN%V" ` 
	export WEEKNUM="${META[WEEKNUM]}"
	ALL_DATE_VAR[$sddvI]="WEEKNUM"; DATE_VAR_I["WEEKNUM"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 

#DOW META[DOW] {META[DOW]} 
	META[DOW]=` /usr/bin/date -d "${META[YYYY]}-${META[MM]}-${META[DD]} 00:00" +'%a' `
	export DOW="${META[DOW]}"
	ALL_DATE_VAR[$sddvI]="DOW"; DATE_VAR_I["DOW"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 

#DAY META[DAY] {META[DAY]} 
	META[DAY]=` /usr/bin/date -d "${META[YYYY]}-${META[MM]}-${META[DD]} 00:00" +'%A' `
	export DAY="${META[DAY]}"
	ALL_DATE_VAR[$sddvI]="DAY"; DATE_VAR_I["DAY"]="$sddvI"; sddvI=${#ALL_DATE_VAR[*]} 

	TEST_OUT="$TEST_OUT $FUNCNAME: DAYID=${META[DAYID]} YYYY=${META[YYYY]} MM=${META[MM]} "
	TEST_OUT="$TEST_OUT DD=${META[DD]} DOW=${META[DOW]} DAY=${META[DAY]} \n" 
	test_out "$TEST_OUT"  
	return 0
}


# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} dw__set_today \"[YYYYMMDD | d:today]\" \n"  
USAGE_MESSAGE="${USAGE_MESSAGE} 	dw__set_today sets TODAY variable \n\n"  
function dw__set_today() {
	F_ARG1=$1 #F_ARG1 

	CURRENT_TODAY=` /usr/bin/date +'%Y%m%d' `
	if [[ (! -n "${META[DAYID]}") || ("$CURRENT_TODAY" != "${META[DAYID]}") ]] ; then
		dw__set_day_date_vars "$F_ARG1"
	fi

#TODAY META[TODAY] {META[TODAY]} 
##?#	if [[ (-n "$F_ARG1") && ("$F_ARG1") ]] ; then
##?#		META[TODAY]="$F_ARG1"
##?#	else # default to today/given day
		META[TODAY]="${META[DAYID]}"
##?#	fi
	export TODAY=${META[TODAY]}

	test_out "$FUNCNAME: META[TODAY](${META[TODAY]}) before test "
# set_today Index 
	stI=${#ALL_DATE_VAR[*]} #stI 
	# test TODAY , then populate with ALL_DATE_VAR and DATE_VAR_I 
	ALL_DATE_VAR[$stI]="TODAY"; DATE_VAR_I["TODAY"]="$stI"; stI=${#ALL_DATE_VAR[*]} 
	test_out "$FUNCNAME: after setup today: TODAY=${META[TODAY]} "

	echo " META[TODAY]=${META[TODAY]} TODAY=${TODAY} "

	return 0;
}


# USAGE:
USAGE_MESSAGE="${USAGE_MESSAGE} dw__set_week_date_vars \"[DAYID=YYYYMMDD | d:today]\" \n"  
USAGE_MESSAGE="${USAGE_MESSAGE}    CT_WK_MONDAY=YYYYMMDD THIS_MONTH=YYYYMM FDOM=YYYYMM01 \n" 
USAGE_MESSAGE="${USAGE_MESSAGE}    NEXT_FDOM=YYYYMM01 NEXT_MONTH=YYYYMM \n"
USAGE_MESSAGE="${USAGE_MESSAGE}  DOW_NAMES[N] 0=Sun    1=Mon    2=Tue     3=Wed       4=Thu      5=Fri 6=Sat \n" 
USAGE_MESSAGE="${USAGE_MESSAGE}  DAY_NAMES[N] 0=Sunday 1=Monday 2=Tuesday 3=Wednesday 4=Thursday 5=Friday 6=Saturday \n\n" 
function dw__set_week_date_vars() { 
	F_ARG1=$1 #F_ARG1 
	if [[ "$F_ARG1" == "-h" ]] ; then
		script_usage_message; return 0 
	fi

# init today vars / set_week_date_vars Index
	swdvI=${#ALL_DATE_VAR[*]} #swdvI 
	dw__set_day_date_vars "$F_ARG1"
	if [[ ! "$?" ]] ; then
		echo "ERROR $FUNCNAME: problem with dw__set_day_date_vars FUNC_RET='$?'"
		return 1
	fi
	test_out "$FUNCNAME: dw__set_day_date_vars FRET='$?' "

	swdvI=${#ALL_DATE_VAR[*]}
	META[THIS_MONTH]="${META[YYYY]}${META[MM]}" # THIS_MONTH 
	export THIS_MONTH="${META[THIS_MONTH]}"
	META[FDOM]="${THIS_MONTH}01" # FDOM 
	export FDOM="${META[FDOM]}"

	META[NEXT_FDOM]=`/usr/bin/date +%Y%m%d --date="$FDOM +1 month"` # NEXT_FDOM 
	export NEXT_FDOM="${META[NEXT_FDOM]}"
	META[NEXT_MONTH]="${NEXT_FDOM:0:6}" # NEXT_MONTH 
	export NEXT_MONTH="${META[NEXT_MONTH]}"
#LAST_DAY_OF_MONTH 
#LDOM META[LDOM] {META[LDOM]} 
	META[LDOM]=`/usr/bin/date --date="$FDOM +1 month -1 day" | /usr/bin/cut -d' ' -f3` 
##P#	META[LDOM]=` /usr/bin/dateadd -i%Y%m%d "${META[YYYY]}${META[MM]}01" +1mo -1d | /usr/bin/cut -f3 -d- `
	ALL_DATE_VAR[$swdvI]="LDOM"; DATE_VAR_I["LDOM"]="$swdvI" 
	export LDOM=${META[LDOM]}
	test_out "$FUNCNAME: META[LDOM]=${META[LDOM]} LDOM=($LDOM) "

	swdvI=${#ALL_DATE_VAR[*]}
#REF_WEEKDAY_NUM META[REF_WEEKDAY_NUM] {META[REF_WEEKDAY_NUM]} 
	META[REF_WEEKDAY_NUM]=`/usr/bin/date -d "${META[YYYY]}-${META[MM]}-${META[DD]} 00:00" +"%u" ` 
	# override Sunday(REF_WEEKDAY_NUM)  
	[[ "${META[REF_WEEKDAY_NUM]}" == 7 ]] && META[REF_WEEKDAY_NUM]=0 
	ALL_DATE_VAR[$swdvI]="REF_WEEKDAY_NUM"; DATE_VAR_I["REF_WEEKDAY_NUM"]="$swdvI" 
	export REF_WEEKDAY_NUM=${META[REF_WEEKDAY_NUM]}
	test_out "$FUNCNAME: REF_WEEKDAY_NUM='${META[REF_WEEKDAY_NUM]}' REF_WEEKDAY_NUM=($REF_WEEKDAY_NUM) " 

	swdvI=${#ALL_DATE_VAR[*]}
#CT_WK_MONDAY META[CT_WK_MONDAY] {META[CT_WK_MONDAY]} # Current Week Monday 
	META[CT_WK_MONDAY]=$(( ${META[DAYID]} - ${META[REF_WEEKDAY_NUM]} + 1 ))
	ALL_DATE_VAR[$swdvI]="CT_WK_MONDAY"; DATE_VAR_I["CT_WK_MONDAY"]="$swdvI" ; swdvI=${#ALL_DATE_VAR[*]}
	export CT_WK_MONDAY=${META[CT_WK_MONDAY]}
	test_out "$FUNCNAME: CT_WK_MONDAY=${META[CT_WK_MONDAY]}"

	test_out " $FUNCNAME: DAYID=${META[DAYID]} REF_WEEKDAY_NUM=${META[REF_WEEKDAY_NUM]} "
	test_out " $FUNCNAME: dayid for CT_WK_MONDAY=${META[CT_WK_MONDAY]} "
#THIS_WEEK_OF_DAYIDS THIS_WEEK_OF_DAYIDS[X] 
	DAY_ADD=0 # DAY_ADD 
	DAY_START=$(( ${META[CT_WK_MONDAY]} - 1 )) # DAY_START 
	test_out "DAY_ADD='$DAY_ADD' "
	test_out "${META[YYYY]}${META[MM]}$LDOM"
	IADD="0" # IADD 
	for (( i=0 ; i<7 ; i++ )) {
		DAY_ADD=$(( $IADD + $DAY_START  )) 
		test_out "DAY_ADD='$DAY_ADD' "
		THIS_WEEK_OF_DAYIDS[$i]=$DAY_ADD 
		IADD=$(( $IADD + 1 )) 
		if [[ "$DAY_ADD" == "${META[YYYY]}${META[MM]}$LDOM" ]] ; then
			DAY_START="$NEXT_FDOM"
			test_out "setting DAY_ADD='NEXT_FDOM($NEXT_FDOM)'"
			IADD="0" 
		fi
	}
	META["array,THIS_WEEK_OF_DAYIDS"]=${#THIS_WEEK_OF_DAYIDS[*]}
	ALL_DATE_VAR[$swdvI]="array,THIS_WEEK_OF_DAYIDS"; DATE_VAR_I["array,THIS_WEEK_OF_DAYIDS"]="$swdvI" ;
	swdvI=${#ALL_DATE_VAR[*]}
	[[ "${META[LIB_TEST]}" == 1 ]] && echo " $FUNCNAME: THIS_WEEK_OF_DAYIDS=${THIS_WEEK_OF_DAYIDS[@]} "
	test_out " NEW new  THIS_WEEK_OF_DAYIDS=${THIS_WEEK_OF_DAYIDS[@]} "

	# add DOW_NAMES
	META["array,DOW_NAMES"]=${#DOW_NAMES[*]}
	ALL_DATE_VAR[$swdvI]="array,DOW_NAMES"; DATE_VAR_I["array,DOW_NAMES"]="$swdvI" ;
	# add DAY_NAMES
	META["array,DAY_NAMES"]=${#DAY_NAMES[*]}
	ALL_DATE_VAR[$swdvI]="array,DAY_NAMES"; DATE_VAR_I["array,DAY_NAMES"]="$swdvI" ;

	day_name="" #day_name 
	dow_name="" #dow_name 
	for((i=0 ; i<${#DOW_NAMES[*]} ; i++)) {
		day_name="${DAY_NAMES[$i]}"
		dow_name="${DOW_NAMES[$i]}"
		DAY_DAYID[$day_name]="${THIS_WEEK_OF_DAYIDS[$i]}" 
		DOW_DAYID[$dow_name]="${THIS_WEEK_OF_DAYIDS[$i]}" 
		test_out "i($i)  DAY_DAYID[$day_name]='${DAY_DAYID[$day_name]}' DOW_DAYID[$dow_name]='${DOW_DAYID[$dow_name]}' "
	}
	META["hash,DAY_DAYID"]=${#THIS_WEEK_OF_DAYIDS[*]}
	ALL_DATE_VAR[$swdvI]="hash,DAY_DAYID"; DATE_VAR_I["hash,DAY_DAYID"]="$swdvI" ;
	swdvI=${#ALL_DATE_VAR[*]}
	META["hash,DOW_DAYID"]=${#THIS_WEEK_OF_DAYIDS[*]}
	ALL_DATE_VAR[$swdvI]="hash,DOW_DAYID"; DATE_VAR_I["hash,DOW_DAYID"]="$swdvI" ;
	swdvI=${#ALL_DATE_VAR[*]}

	return 0
} 


# USAGE:
function dw__set_month_date_vars() {
	F_ARG1=$1 #F_ARG1 
}


# USAGE:
function dw__set_year_date_vars() {
	F_ARG1=$1 #F_ARG1 
}

#-- dWf } 


# ---- ---- } 


